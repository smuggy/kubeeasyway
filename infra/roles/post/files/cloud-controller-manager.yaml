apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cloud-controller-manager
rules:
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
      - update
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - '*'
  - apiGroups:
      - ""
    resources:
      - nodes/status
    verbs:
      - patch
      - get
      - list
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - serviceaccounts
    verbs:
      - create
      - get
      - list
  - apiGroups:
      - ""
    resources:
      - persistentvolumes
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - create
      - get
      - list
      - watch
      - update
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - list
      - get
#  - apiGroups:
#      - rbac.authorization.k8s.io/v1
#    resources:
#      - clusterroles
#    verbs:
#      - bind
# ---
# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   labels:
#     app.kubernetes.io/name: cloud-controller-manager
#     app.kubernetes.io/part-of: cloud-controller-manager
#   name: cloud-controller-manager
#   namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cloud-controller-manager
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:cloud-controller-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: cloud-controller-manager
    namespace: kube-system
#---
#apiVersion: rbac.authorization.k8s.io/v1
#kind: ClusterRoleBinding
#metadata:
#  name: cloud-controller-manager-crb
#roleRef:
#  apiGroup: rbac.authorization.k8s.io
#  kind: ClusterRole
#  name: cloud-controller-manager
#subjects:
#  - kind: ServiceAccount
#    name: cloud-controller-manager
#    namespace: kube-system
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    k8s-app: cloud-controller-manager
  name: cloud-controller-manager
  namespace: kube-system
spec:
  selector:
    matchLabels:
      k8s-app: cloud-controller-manager
  template:
    metadata:
      labels:
        k8s-app: cloud-controller-manager
    spec:
      serviceAccountName: cloud-controller-manager
      containers:
        - name: cloud-controller-manager
          image: k8s.gcr.io/cloud-controller-manager:v1.15.12
          env:
            - name: AWS_DEFAULT_REGION
              value: "us-east-2"
          volumeMounts:
            - mountPath: /etc/ssl/certs
              name: ssl-certs
          command:
            - /usr/local/bin/cloud-controller-manager
            - --cloud-provider=aws
            - --leader-elect=true
            - --use-service-account-credentials
            - --allocate-node-cidrs=true
            - --configure-cloud-routes=true
            - --cluster-cidr=10.244.0.0/16
      tolerations:
        - key: node.cloudprovider.kubernetes.io/uninitialized
          value: "true"
          effect: NoSchedule
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      nodeSelector:
        node-role.kubernetes.io/master: ""
      volumes:
        - name: ssl-certs
          hostPath:
            path: /etc/ssl/certs
            type: Directory

